- provide :title, t(".title")
= content_for :head do
  = javascript_include_tag 'orders', 'data-turbolinks-track': 'reload'
  script src="https://www.paypal.com/sdk/js?client-id=#{ENV.fetch('PAYPAL_CLIENT_ID')}"
.d-flex.border-bottom.pb-3.mb-3
  h3 = t(".title")

div
  .row
    .col-2
      = vehicle_image(@order.vehicle, 100)
    .col-7
      p.fw-bold = vehicle_title(@order.vehicle)
      p = @order.vehicle.price
    .col-3
      
  .divider
  .row.g-0.text-end.mb-3
    .col-md-8
      .border-bottom.border-end.p-2
        span = t('.uid')
      .border-bottom.border-end.p-2
        span = t('.status')
      .border-bottom.border-end.p-2
        span = t('.start_date')
      .border-bottom.border-end.p-2
        span = t('.end_date')
      .border-bottom.border-end.p-2
        span = t('.rental_times')
      - if @order.is_home_delivery
        .border-bottom.border-end.p-2
          span = t('.delivery_address')
      - if @order.processing_at
        .border-bottom.border-end.p-2
          span = t('.processing_at')
      - if @order.completed_at
        .border-bottom.border-end.p-2
          span = t('.completed_at')
      .border-bottom.border-end.p-2
        span = t('.payment_kind')
      .border-bottom.border-end.p-2
        span = t('.amount')
    .col-md-4
      .border-bottom.p-2.min-height-40
        span = @order.uid || '-'
      .border-bottom.p-2.min-height-40
        span class="badge bg-secondary" = t(".#{@order.status}")
      .border-bottom.p-2.min-height-40
        span = l(@order.start_date)
      .border-bottom.p-2.min-height-40
        span = l(@order.end_date)
      .border-bottom.p-2.min-height-40
        span = try_integer(@order.rental_times)
      - if @order.is_home_delivery
        .border-bottom.p-2.text-truncate.min-height-40
          span data-bs-toggle="tooltip" data-bs-placement="top" title="#{@order.delivery_address}"
            = @order.delivery_address
      - if @order.processing_at
        .border-bottom.p-2.text-truncate.min-height-40
          span = l(@order.processing_at)
      - if @order.completed_at
        .border-bottom.p-2.text-truncate.min-height-40
          span = l(@order.completed_at)
      .border-bottom.p-2.min-height-40
        span = t(".#{@order.payment_kind}")
      .border-bottom.p-2.min-height-40
        span.text-primary.fw-bold = try_integer(@order.amount)
  div.d-flex.justify-content-end.gap-2
    - if @is_rental_page
      - if @order.status == 'pending'
        = link_to t('.accept'), accept_account_order_manage_path(@order), method: 'PATCH',
          class: 'btn btn-outline-primary', data: {confirm: t('.confirm_accept')}
        = link_to t('.cancel'), cancel_account_order_manage_path(@order), method: 'PATCH',
          class: 'btn btn-outline-danger', data: {confirm: t('.confirm_cancel')}
      - elsif @order.status == 'accepted'
        = link_to t('.start_process'), processing_account_order_manage_path(@order), method: 'PATCH',
          class: 'btn btn-outline-danger', data: {confirm: t('.confirm_process', time: Time.current)}
      - elsif @order.status == 'processing'
        = link_to t('.confirm_complete'), checkout_account_order_manage_path(@order, completed_at: Time.current), class: 'btn btn-primary'
      = link_to t('.back'), account_order_manages_path, class: 'btn btn-outline-secondary'
    - else
      - if @order.status.in?(['opening', 'pending'])
        = link_to t('.update'), edit_account_order_path(@order), class: 'btn btn-primary'
        = link_to t('.cancel'), cancel_account_order_path(@order), method: 'PATCH',
          class: 'btn btn-outline-danger', data: {confirm: t('.confirm_cancel')}
      = link_to t('.back'), account_orders_path, class: 'btn btn-outline-secondary'
- if @order.completed?
  row
    .col-md-6.offset-md-3
      #paypal-button-container

javascript:
  const USDRate = 24000
  const amountUSD = #{@order.amount} / USDRate

  paypal.Buttons({
    // Sets up the transaction when a payment button is clicked
    createOrder: (data, actions) => {
      return actions.order.create({
        purchase_units: [{
          amount: {
            value: amountUSD// Can also reference a variable or function
          }
        }]
      });
    },
    // Finalize the transaction after payer approval
    onApprove: (data, actions) => {
      $.ajax({
        url: "#{checkout_payment_path}",
        method: 'POST',
        dataType: 'json',
        data: JSON.stringify({
          'payment_id': data.orderID,
          'order_uid': "#{@order.uid}"
        }),
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': $('meta[name="csrf-token"]').content
        }
      })
    }
  }).render('#paypal-button-container');
