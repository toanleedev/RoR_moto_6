- provide :title, t(".title")
= content_for :head do
  = javascript_include_tag 'orders', 'data-turbolinks-track': 'reload'
  script src="https://www.paypal.com/sdk/js?client-id=#{ENV.fetch('PAYPAL_CLIENT_ID')}"
.d-flex.border-bottom.pb-3.mb-3
  h3 = t(".title")

div
  = render 'owner_card'
  .row
    .col-2
      = vehicle_image(@order.vehicle, 100)
    .col-7
      p.fw-bold = @order.vehicle.full_name
      p = @order.vehicle.price
    .col-3

  .divider
  .row.g-0.text-end.mb-3
    .col-md-8
      .border-bottom.border-end.p-2
        span = t('.uid')
      .border-bottom.border-end.p-2
        span = t('.status')
      .border-bottom.border-end.p-2
        span = t('.start_date')
      .border-bottom.border-end.p-2
        span = t('.end_date')
      .border-bottom.border-end.p-2
        span = t('.rental_times')
      - if @order.is_home_delivery
        .border-bottom.border-end.p-2
          span = t('.delivery_address')
      - if @order.processing_at
        .border-bottom.border-end.p-2
          span = t('.processing_at')
      - if @order.completed_at
        .border-bottom.border-end.p-2
          span = t('.completed_at')
      - if @order.paid_at
        .border-bottom.border-end.p-2
          span = t('.paid_at')
      .border-bottom.border-end.p-2
        span = t('.payment_kind')
      .border-bottom.border-end.p-2
        span = t('.amount')
    .col-md-4
      .border-bottom.p-2.min-height-40
        span = @order.uid || '-'
      .border-bottom.p-2.min-height-40
        span class="badge bg-secondary" = t(".#{@order.status}")
        - if @order.paid_at.present?
          span class="badge bg-success ms-2" = t('.paid')
      .border-bottom.p-2.min-height-40
        span = l(@order.start_date)
      .border-bottom.p-2.min-height-40
        span = l(@order.end_date)
      .border-bottom.p-2.min-height-40
        span = try_integer(@order.rental_times)
      - if @order.is_home_delivery
        .border-bottom.p-2.text-truncate.min-height-40
          span data-bs-toggle="tooltip" data-bs-placement="top" title="#{@order.delivery_address}"
            = @order.delivery_address
      - if @order.processing_at
        .border-bottom.p-2.text-truncate.min-height-40
          span = l(@order.processing_at)
      - if @order.completed_at
        .border-bottom.p-2.text-truncate.min-height-40
          span = l(@order.completed_at)
      - if @order.paid_at
        .border-bottom.p-2.text-truncate.min-height-40
          span = l(@order.paid_at)
      .border-bottom.p-2.min-height-40
        span = t(".#{@order.payment_kind}")
      .border-bottom.p-2.min-height-40
        span.text-primary.fw-bold = try_integer(@order.amount)
  - if @order.vehicle_rating.present?
    .card.mb-3
      .card-body
        .row
          .col-md-9
            = @order.vehicle_rating.content
          .col-md-3.d-flex.gap-1.align-items-start
            - current_rate = @order.vehicle_rating.rating_point
            = render 'shared/rating', rating: current_rate

  div.d-flex.justify-content-end.gap-2
    - if @order.status.in?(['opening', 'pending'])
      = link_to t('.update'), edit_account_order_path(@order), class: 'btn btn-primary'
      = link_to t('.cancel'), cancel_account_order_path(@order), method: 'PATCH',
        class: 'btn btn-outline-danger', data: {confirm: t('.confirm_cancel')}
    - elsif @order.completed? && @order.paid_at.present? && @order.vehicle_rating.blank?
      button.btn.btn-primary[data-bs-toggle="modal" data-bs-target="#ratingModel"]
        = t('.rating')
      = render 'rating_modal'
    = link_to t('.back'), account_orders_path, class: 'btn btn-outline-secondary'
- if @order.paypal? &&  @order.completed? && @order.paid_at.blank?
  row
    .col-md-6.offset-md-3
      #paypal-button-container

javascript:
  const USDRate = 24000
  const amountUSD = Math.round(#{@order.amount} / USDRate)

  if(#{@order.paypal?} && #{@order.completed?} && #{@order.paid_at.blank?}){
    paypal.Buttons({
      createOrder: (data, actions) => {
        return actions.order.create({
          purchase_units: [{
            amount: {
              value: amountUSD
            }
          }]
        });
      },

      onApprove: (data, actions) => {
        $.ajax({
          url: "#{checkout_payment_path}",
          method: 'POST',
          dataType: 'json',
          data: JSON.stringify({
            'payment_id': data.orderID,
            'order_uid': "#{@order.uid}"
          }),
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': $('meta[name="csrf-token"]').content
          },
          error: function (xhr, ajaxOptions, thrownError) {
            console.log(thrownError);
          },
          success: function (response) {
            alert(response.message)
            window.location.href = response.url;
          },
        })
      }
    }).render('#paypal-button-container');
  }
